import sys
import random
import time
from PyQt5.QtWidgets import (QApplication, QWidget, QVBoxLayout, QHBoxLayout,
                            QPushButton, QLabel, QDialog, QTextEdit, QFrame,
                            QScrollArea, QGridLayout, QSplitter, QDesktopWidget)
from PyQt5.QtGui import QFont, QPalette
from PyQt5.QtCore import Qt, QTimer

class AIExplanationDialog(QDialog):
    def __init__(self, move_type, board_state, chosen_move, parent=None):
        super().__init__(parent)
        self.move_type = move_type
        self.board_state = board_state[:]
        self.chosen_move = chosen_move
        self.initUI()

    def initUI(self):
        self.setWindowTitle('üß† Cum "g√¢nde»ôte" computerul - AI simplu')
        self.setGeometry(300, 200, 700, 600)
        self.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #f8f9fa, stop: 1 #e9ecef);
            }
            QLabel {
                color: #2c3e50;
                font-family: Arial;
            }
            .title {
                font-size: 20px;
                font-weight: bold;
                color: #e74c3c;
                margin: 10px;
            }
            .step {
                font-size: 14px;
                background-color: #fff;
                border-left: 4px solid #3498db;
                padding: 12px;
                margin: 8px;
                border-radius: 4px;
            }
            .step-win {
                border-left-color: #27ae60;
                background-color: #d5f4e6;
            }
            .step-block {
                border-left-color: #f39c12;
                background-color: #fef9e7;
            }
            .step-random {
                border-left-color: #9b59b6;
                background-color: #f4ecf7;
            }
            QPushButton {
                background-color: #3498db;
                color: white;
                padding: 10px 20px;
                border: none;
                border-radius: 5px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)

        layout = QVBoxLayout()

        # Title
        title = QLabel('ü§ñ Explica»õia MutƒÉrii Computerului')
        title.setObjectName('title')
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("""
            font-size: 22px;
            font-weight: bold;
            color: #ffffff;
            background-color: #2c3e50;
            padding: 15px;
            border-radius: 8px;
            margin: 15px;
        """)
        layout.addWidget(title)

        # Create scroll area for content
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout()


        # Step by step analysis - skil for as too much crowding the UI
        # self.add_step_analysis(scroll_layout)

        # Current move explanation
        move_frame = QFrame()
        move_frame.setStyleSheet(f"""
            QFrame {{
                background-color: {'#d5f4e6' if self.move_type == 'win' else '#fef9e7' if self.move_type == 'block' else '#f4ecf7'};
                border: 2px solid {'#27ae60' if self.move_type == 'win' else '#f39c12' if self.move_type == 'block' else '#9b59b6'};
                border-radius: 8px;
                padding: 15px;
                margin: 10px;
            }}
        """)
        move_layout = QVBoxLayout()

        move_icons = {'win': 'üéØ', 'block': 'üõ°Ô∏è', 'random': 'üé≤'}
        move_titles = {
            'win': 'C√Ç»òTIG!',
            'block': 'BLOCHEZ!',
            'random': 'MUTARE ALEATOARE!'
        }
        move_descriptions = {
            'win': 'Am gƒÉsit o mutare c√¢»ôtigƒÉtoare!',
            'block': 'Trebuie sƒÉ te blochez!',
            'random': 'Nu e nicio urgen»õƒÉ, aleg random.'
        }

        current_move_title = QLabel(f'{move_icons[self.move_type]} {move_titles[self.move_type]}')
        current_move_title.setStyleSheet("font-size: 18px; font-weight: bold;")
        current_move_title.setAlignment(Qt.AlignCenter)
        move_layout.addWidget(current_move_title)

        current_move_desc = QLabel(move_descriptions[self.move_type])
        current_move_desc.setStyleSheet("font-size: 14px; font-style: italic;")
        current_move_desc.setAlignment(Qt.AlignCenter)
        move_layout.addWidget(current_move_desc)

        position_label = QLabel(f'Pozi»õia aleasƒÉ: {self.chosen_move + 1} (r√¢nd {self.chosen_move // 3 + 1}, coloana {self.chosen_move % 3 + 1})')
        position_label.setStyleSheet("font-size: 14px; margin-top: 5px;")
        position_label.setAlignment(Qt.AlignCenter)
        move_layout.addWidget(position_label)

        move_frame.setLayout(move_layout)
        scroll_layout.addWidget(move_frame)

        # Philosophy section
        philosophy_frame = QFrame()
        philosophy_frame.setStyleSheet("""
            QFrame {
                background-color: #ecf0f1;
                border: 2px solid #95a5a6;
                border-radius: 8px;
                padding: 15px;
                margin: 10px;
            }
        """)
        philosophy_layout = QVBoxLayout()

        philo_title = QLabel('üé≠ Filosofia AI: Simplu vs Complex')
        philo_title.setStyleSheet("font-size: 16px; font-weight: bold; color: #2c3e50;")
        philosophy_layout.addWidget(philo_title)

        philosophy_text = """
üîπ Acest AI este FOARTE SIMPLU - doar 3 reguli fixe!
üîπ Nu "√Ænva»õƒÉ" nimic, nu "√Æn»õelege" jocul
üîπ Nu calculeazƒÉ viitorul, nu folose»ôte experien»õa trecutƒÉ
üîπ E ca un robot care executƒÉ instruc»õiuni simple

üß† AI ADEVƒÇRAT (Re»õele Neurale):
üîπ Ar putea "√ÆnvƒÉ»õa" joc√¢nd mii de partide
üîπ Ar putea calcula 10+ mutƒÉri √Æn viitor
üîπ Ar putea gƒÉsi strategii pe care nici nu le »ôtim!
üîπ Dar... nu am putea √Æn»õelege exact cum "g√¢nde»ôte"

üí° Paradoxul: Cu c√¢t AI devine mai puternic, cu at√¢t devine mai misterios!
        """

        philo_label = QLabel(philosophy_text)
        philo_label.setStyleSheet("font-size: 12px; line-height: 1.4;")
        philo_label.setWordWrap(True)
        philosophy_layout.addWidget(philo_label)

        philosophy_frame.setLayout(philosophy_layout)
        scroll_layout.addWidget(philosophy_frame)

        scroll_widget.setLayout(scroll_layout)
        scroll.setWidget(scroll_widget)
        layout.addWidget(scroll)

        # Close button
        close_btn = QPushButton('√én»õeleg! üß†')
        close_btn.clicked.connect(self.accept)
        layout.addWidget(close_btn)

        self.setLayout(layout)

    def add_step_analysis(self, layout):
        analysis_frame = QFrame()
        analysis_frame.setStyleSheet("""
            QFrame {
                background-color: white;
                border: 2px solid #3498db;
                border-radius: 8px;
                padding: 10px;
                margin: 5px;
            }
        """)
        analysis_layout = QVBoxLayout()

        analysis_title = QLabel('üîç Analiza pas cu pas:')
        analysis_title.setStyleSheet("font-size: 16px; font-weight: bold; color: #2c3e50; margin-bottom: 10px;")
        analysis_layout.addWidget(analysis_title)

        # Step 1: Check for winning move
        step1_label = QLabel('PASUL 1: Verific dacƒÉ pot c√¢»ôtiga...')
        step1_label.setStyleSheet("font-size: 14px; font-weight: bold; color: #27ae60;")
        analysis_layout.addWidget(step1_label)

        can_win, win_pos = self.check_winning_move('O')
        if can_win:
            step1_result = QLabel(f'‚úÖ DA! Pot c√¢»ôtiga la pozi»õia {win_pos + 1}!')
            step1_result.setStyleSheet("background-color: #d5f4e6; padding: 8px; border-radius: 4px; margin: 5px;")
        else:
            step1_result = QLabel('‚ùå Nu pot c√¢»ôtiga acum.')
            step1_result.setStyleSheet("background-color: #fadbd8; padding: 8px; border-radius: 4px; margin: 5px;")
        analysis_layout.addWidget(step1_result)

        if not can_win:
            # Step 2: Check for blocking move
            step2_label = QLabel('PASUL 2: Verific dacƒÉ trebuie sƒÉ blochez...')
            step2_label.setStyleSheet("font-size: 14px; font-weight: bold; color: #f39c12; margin-top: 10px;")
            analysis_layout.addWidget(step2_label)

            can_block, block_pos = self.check_winning_move('X')
            if can_block:
                step2_result = QLabel(f'‚ö†Ô∏è DA! Trebuie sƒÉ blochez la pozi»õia {block_pos + 1}!')
                step2_result.setStyleSheet("background-color: #fef9e7; padding: 8px; border-radius: 4px; margin: 5px;")
            else:
                step2_result = QLabel('‚úÖ Nu trebuie sƒÉ blochez nimic.')
                step2_result.setStyleSheet("background-color: #d5f4e6; padding: 8px; border-radius: 4px; margin: 5px;")
            analysis_layout.addWidget(step2_result)

            if not can_block:
                # Step 3: Random move
                step3_label = QLabel('PASUL 3: Aleg o pozi»õie liberƒÉ la √Ænt√¢mplare...')
                step3_label.setStyleSheet("font-size: 14px; font-weight: bold; color: #9b59b6; margin-top: 10px;")
                analysis_layout.addWidget(step3_label)

                empty_positions = [i for i, val in enumerate(self.board_state) if val == '']
                step3_result = QLabel(f'üé≤ Pozi»õii libere: {[p+1 for p in empty_positions]}')
                step3_result.setStyleSheet("background-color: #f4ecf7; padding: 8px; border-radius: 4px; margin: 5px;")
                analysis_layout.addWidget(step3_result)

        analysis_frame.setLayout(analysis_layout)
        layout.addWidget(analysis_frame)

    def check_winning_move(self, player):
        win_conditions = [
            (0, 1, 2), (3, 4, 5), (6, 7, 8),  # rows
            (0, 3, 6), (1, 4, 7), (2, 5, 8),  # columns
            (0, 4, 8), (2, 4, 6)             # diagonals
        ]

        for positions in win_conditions:
            values = [self.board_state[i] for i in positions]
            if values.count(player) == 2 and values.count('') == 1:
                empty_pos = positions[values.index('')]
                return True, empty_pos
        return False, -1

class AIPhilosophyDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.initUI()

    def initUI(self):
        self.setWindowTitle('üåå Filosofia Erei AI - Viziunea asupra Viitorului')

        # Get screen dimensions and make dialog nearly full screen
        desktop = QDesktopWidget()
        screen = desktop.availableGeometry()
        dialog_width = min(1200, int(screen.width() * 0.9))
        dialog_height = min(900, int(screen.height() * 0.9))
        x = (screen.width() - dialog_width) // 2
        y = (screen.height() - dialog_height) // 2

        self.setGeometry(x, y, dialog_width, dialog_height)
        self.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #0f0f23, stop: 1 #1a1a2e);
                color: #eee;
            }
            QLabel {
                color: #eee;
                font-family: Arial;
            }
            QScrollArea {
                border: none;
                background: transparent;
            }
            QPushButton {
                background-color: #4a69bd;
                color: white;
                padding: 12px 24px;
                border: none;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #3c5aa6;
            }
        """)

        layout = QVBoxLayout()

        # Title with cosmic feel
        title = QLabel('üåå VIZIUNEA ASUPRA EREI INTELIGEN»öEI ARTIFICIALE üöÄ')
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("""
            font-size: 24px;
            font-weight: bold;
            color: #00d2d3;
            background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
                                      stop: 0 #1e3c72, stop: 1 #2a5298);
            padding: 20px;
            border-radius: 12px;
            margin: 10px;
            border: 2px solid #00d2d3;
        """)
        layout.addWidget(title)

        # Create scroll area for the vision content
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout()

        # The philosophical journey
        self.add_programming_limits_section(scroll_layout)
        self.add_complexity_revelation_section(scroll_layout)
        self.add_neural_breakthrough_section(scroll_layout)
        self.add_ai_era_section(scroll_layout)
        self.add_applications_section(scroll_layout)
        self.add_reflection_section(scroll_layout)

        scroll_widget.setLayout(scroll_layout)
        scroll.setWidget(scroll_widget)
        layout.addWidget(scroll)

        # Close button with style
        close_btn = QPushButton('üß† √én»õeleg Viziunea - √énapoi la Joc')
        close_btn.clicked.connect(self.accept)
        layout.addWidget(close_btn)

        self.setLayout(layout)

    def add_programming_limits_section(self, layout):
        section = QFrame()
        section.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #2c3e50, stop: 1 #34495e);
                border-radius: 12px;
                padding: 15px;
                margin: 10px;
                border-left: 5px solid #e74c3c;
            }
        """)
        section_layout = QVBoxLayout()

        title = QLabel('üîß LIMITELE PROGRAMƒÇRII TRADI»öIONALE')
        title.setStyleSheet("font-size: 18px; font-weight: bold; color: #e74c3c; margin-bottom: 10px;")
        section_layout.addWidget(title)

        content = QLabel("""
Pentru aceasta - rƒÉm√¢ne strict √Æn limitele Imagina»õiei »ôi Execu»õiei programatorului sƒÉ
capteze algoritmi mai profunzi.

üéØ REALITATEA PROGRAMƒÇRII CLASICE:
‚Ä¢ Programatorul trebuie sƒÉ anticipeze TOATE situa»õiile posibile
‚Ä¢ Fiecare regulƒÉ trebuie scrisƒÉ explicit
‚Ä¢ Complexitatea cre»ôte exponen»õial cu problema
‚Ä¢ Pentru X-O: 3‚Åπ = 19,683 de stƒÉri posibile (√ÆncƒÉ gestionabil)
‚Ä¢ Pentru »ôah: ~10‚Å¥¬≥ pozi»õii posibile (imposibil de programat manual)

üß† LIMITELE MIN»öII UMANE:
Chiar »ôi cei mai brilianti programatori sunt limita»õi de:
‚Ä¢ Capacitatea de a vizualiza toate scenariile
‚Ä¢ Timpul finit pentru a scrie toate regulile
‚Ä¢ Imposibilitatea de a anticipa toate cazurile speciale
        """)
        content.setStyleSheet("font-size: 13px; line-height: 1.4; color: #ecf0f1;")
        content.setWordWrap(True)
        section_layout.addWidget(content)

        section.setLayout(section_layout)
        layout.addWidget(section)

    def add_complexity_revelation_section(self, layout):
        section = QFrame()
        section.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #8e44ad, stop: 1 #9b59b6);
                border-radius: 12px;
                padding: 15px;
                margin: 10px;
                border-left: 5px solid #f39c12;
            }
        """)
        section_layout = QVBoxLayout()

        title = QLabel('üåå REVELA»öIA COMPLEXITƒÇ»öII REALITƒÇ»öII')
        title.setStyleSheet("font-size: 18px; font-weight: bold; color: #f39c12; margin-bottom: 10px;")
        section_layout.addWidget(title)

        content = QLabel("""
√én cƒÉutarea executƒÉrii sarcinilor la complexitatea nivelului uman - »ôi confrunt√¢ndu-ne cu
conceptul de nerezolvat cƒÉ realitatea este at√¢t de complexƒÉ »ôi conectatƒÉ √Ænc√¢t nu poate fi
ModelatƒÉ √Æn variabile »ôi sisteme...

üåç IMPOSIBILITATEA MODELƒÇRII COMPLETE:
‚Ä¢ Realitatea este infinit de complexƒÉ »ôi interconectatƒÉ
‚Ä¢ Fiecare ac»õiune influen»õeazƒÉ sisteme multiple
‚Ä¢ Variabilele sunt infinite »ôi √Æn continuƒÉ schimbare
‚Ä¢ Rela»õiile cauzƒÉ-efect sunt non-liniare »ôi chaotice

üî¨ EXEMPLUL UNUI SIMPLU PIXEL:
Pentru a recunoa»ôte un pisicƒÉ √Æntr-o imagine:
‚Ä¢ Trebuie sƒÉ analizezi milioane de pixeli
‚Ä¢ SƒÉ √Æn»õelegi formele, texturile, contextul
‚Ä¢ SƒÉ »õii cont de iluminare, unghi, ocluzie
‚Ä¢ SƒÉ diferen»õiezi √Æntre pisicƒÉ, c√¢ine, umbrƒÉ

Cum sƒÉ scrii reguli pentru TOATE aceste cazuri? IMPOSIBIL!
        """)
        content.setStyleSheet("font-size: 13px; line-height: 1.4; color: #ecf0f1;")
        content.setWordWrap(True)
        section_layout.addWidget(content)

        section.setLayout(section_layout)
        layout.addWidget(section)

    def add_neural_breakthrough_section(self, layout):
        section = QFrame()
        section.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #27ae60, stop: 1 #2ecc71);
                border-radius: 12px;
                padding: 15px;
                margin: 10px;
                border-left: 5px solid #00d2d3;
            }
        """)
        section_layout = QVBoxLayout()

        title = QLabel('üß† DESCOPERIREA REVOLU»öIONARƒÇ: RE»öELELE NEURALE')
        title.setStyleSheet("font-size: 18px; font-weight: bold; color: #00d2d3; margin-bottom: 10px;")
        section_layout.addWidget(title)

        content = QLabel("""
Am √Ænceput sƒÉ privim dintr-un unghi diferit - Re»õelele Neurale - √Æn loc sƒÉ √Æn»õelegem
dimensiunea imposibilƒÉ a realitƒÉ»õii - sƒÉ mimƒÉm mai degrabƒÉ arhitectura creierului nostru -
»ôi matematica profundƒÉ - permi»õ√¢ndu-i sƒÉ "√Æ»ôi urmeze" cursul (Inferen»õƒÉ).

üî¨ SCHIMBAREA DE PARADIGMƒÇ:
√én loc sƒÉ scriem reguli: "DacƒÉ vezi formƒÉ triunghiularƒÉ + urechi ascu»õite = pisicƒÉ"
CreƒÉm o re»õea care √Ænva»õƒÉ singurƒÉ: "AratƒÉ-mi 1 milion de poze cu pisici »ôi voi √ÆnvƒÉ»õa
sƒÉ le recunosc fƒÉrƒÉ sƒÉ-mi spui cum"

üßÆ MATEMATICA PROFUNDƒÇ:
‚Ä¢ Miliarde de conexiuni neuronale artificiale
‚Ä¢ Algoritmi de optimizare complexi (backpropagation)
‚Ä¢ Func»õii de activare non-liniare
‚Ä¢ Gradient descent √Æn spa»õii multidimensionale

üåä EMERGEN»öA INTELIGEN»öEI:
Prin miliarde de micro-ajustƒÉri matematice, apare ceva magic:
Comportament inteligent fƒÉrƒÉ programare explicitƒÉ!
        """)
        content.setStyleSheet("font-size: 13px; line-height: 1.4; color: #ecf0f1;")
        content.setWordWrap(True)
        section_layout.addWidget(content)

        section.setLayout(section_layout)
        layout.addWidget(section)

    def add_ai_era_section(self, layout):
        section = QFrame()
        section.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #e67e22, stop: 1 #f39c12);
                border-radius: 12px;
                padding: 15px;
                margin: 10px;
                border-left: 5px solid #fff;
            }
        """)
        section_layout = QVBoxLayout()

        title = QLabel('‚ö° ASTFEL - MARELE CONCEPT AL PIERDERII CONTROLULUI')
        title.setStyleSheet("font-size: 18px; font-weight: bold; color: #fff; margin-bottom: 10px;")
        section_layout.addWidget(title)

        content = QLabel("""
Astfel, marele concept cƒÉ nu putem fi pe deplin con»ôtien»õi de ceea ce se √Ænt√¢mplƒÉ exact
√Æntr-o Re»õea NeuralƒÉ - prin urmare nu putem avea un control deplin asupra unei AI.

üå™Ô∏è PARADOXUL PUTERII AI:
‚Ä¢ Cu c√¢t AI devine mai puternic, cu at√¢t devine mai misterios
‚Ä¢ Nu »ôtim exact DE CE ia anumite decizii
‚Ä¢ Poate descoperi strategii pe care noi nu le √Æn»õelegem
‚Ä¢ Poate gƒÉsi solu»õii la care noi nu ne-am g√¢ndit niciodatƒÉ

üöÄ NA»òTEREA EREI AI:
AceastƒÉ descoperire √Ænt√¢lnind progresele tehnologice actuale care ne-au oferit hardware-ul
pentru a rula aceste Modele Matematice pe el, a ridicat Era AI.

üíª REVOLU»öIA HARDWARE:
‚Ä¢ GPU-uri puternice pentru calcule paralele
‚Ä¢ TPU-uri specializate pentru re»õele neurale
‚Ä¢ Cloud computing la scarƒÉ masivƒÉ
‚Ä¢ Putere de calcul exponen»õialƒÉ

üåü REZULTATUL:
Pentru prima datƒÉ √Æn istorie, avem at√¢t algoritmii c√¢t »ôi puterea de calcul
pentru a crea inteligen»õƒÉ artificialƒÉ adevƒÉratƒÉ!
        """)
        content.setStyleSheet("font-size: 13px; line-height: 1.4; color: #ecf0f1;")
        content.setWordWrap(True)
        section_layout.addWidget(content)

        section.setLayout(section_layout)
        layout.addWidget(section)

    def add_applications_section(self, layout):
        section = QFrame()
        section.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #3498db, stop: 1 #2980b9);
                border-radius: 12px;
                padding: 15px;
                margin: 10px;
                border-left: 5px solid #ecf0f1;
            }
        """)
        section_layout = QVBoxLayout()

        title = QLabel('üöÄ DINCOLO DE X-O: AUTOMATIZƒÇRI FƒÇRƒÇ PRECEDENT')
        title.setStyleSheet("font-size: 18px; font-weight: bold; color: #ecf0f1; margin-bottom: 10px;")
        section_layout.addWidget(title)

        content = QLabel("""
A»ôadar, √Æn loc sƒÉ definim logicƒÉ clarƒÉ »ôi restrictivƒÉ chiar »ôi pentru un joc X-O - am putea crea
un Model Matematic (Re»õea NeuralƒÉ) - »ôi sƒÉ antrenƒÉm acest Model sƒÉ √Ænve»õe sƒÉ joace jocul.

Desigur, aceasta merge cu mult dincolo de un Joc X-O - cƒÉtre Modele de Limbaj, Modele Vizuale,
»ôi tot felul de AutomatizƒÉri care nu au fost niciodatƒÉ posibile √Ænainte.

üéØ MODELE DE LIMBAJ (ChatGPT, Claude):
‚Ä¢ √én»õeleg »ôi genereazƒÉ text uman
‚Ä¢ Traduc √Æntre limbi
‚Ä¢ RƒÉspund la √ÆntrebƒÉri complexe
‚Ä¢ Scriu cod, poezii, esee

üëÅÔ∏è MODELE VIZUALE:
‚Ä¢ Recunosc obiecte √Æn imagini
‚Ä¢ GenereazƒÉ artƒÉ din descrieri
‚Ä¢ AnalizeazƒÉ imagini medicale
‚Ä¢ Conduc ma»ôini autonome

üéµ MODELE AUDIO:
‚Ä¢ Recunoa»ôtere vocalƒÉ (Siri, Alexa)
‚Ä¢ Generare de muzicƒÉ
‚Ä¢ Traducere √Æn timp real
‚Ä¢ SintezƒÉ vocalƒÉ naturalƒÉ

ü§ñ AUTOMATIZƒÇRI IMPOSIBILE √éNAINTE:
‚Ä¢ Diagnostic medical automat
‚Ä¢ Descoperire de medicamente
‚Ä¢ Predic»õii meteo avansate
‚Ä¢ Optimizare logisticƒÉ globalƒÉ
‚Ä¢ Cercetare »ôtiin»õificƒÉ automatizatƒÉ
        """)
        content.setStyleSheet("font-size: 13px; line-height: 1.4; color: #ecf0f1;")
        content.setWordWrap(True)
        section_layout.addWidget(content)

        section.setLayout(section_layout)
        layout.addWidget(section)

    def add_reflection_section(self, layout):
        section = QFrame()
        section.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #1a1a2e, stop: 1 #16213e);
                border-radius: 12px;
                padding: 20px;
                margin: 10px;
                border: 3px solid #00d2d3;
            }
        """)
        section_layout = QVBoxLayout()

        title = QLabel('üí≠ REFLEC»öIA FINALƒÇ: UNDE NE √éNDREPTƒÇM?')
        title.setStyleSheet("font-size: 20px; font-weight: bold; color: #00d2d3; margin-bottom: 15px;")
        section_layout.addWidget(title)

        content = QLabel("""
üåå SUNTEM MARTORII UNEI REVOLU»öII:
Prin acest simplu joc X-O, am vƒÉzut diferen»õa fundamentalƒÉ √Æntre:
‚Ä¢ Programarea tradi»õionalƒÉ (reguli explicite)
‚Ä¢ Inteligen»õa artificialƒÉ (√ÆnvƒÉ»õare din experien»õƒÉ)

üöÄ VIITORUL:
‚Ä¢ AI-ul va depƒÉ»ôi capacitƒÉ»õile umane √Æn tot mai multe domenii
‚Ä¢ Vom colabora cu sisteme pe care nu le √Æn»õelegem complet
‚Ä¢ Vom descoperi solu»õii la probleme considerate imposibile
‚Ä¢ Vom redefini ce √ÆnseamnƒÉ sƒÉ fii inteligent

ü§î √éNTREBƒÇRI PROFUNDE:
‚Ä¢ Ce se √Ænt√¢mplƒÉ c√¢nd AI-ul devine mai inteligent dec√¢t creatorii sƒÉi?
‚Ä¢ Cum men»õinem controlul asupra sistemelor pe care nu le √Æn»õelegem?
‚Ä¢ Cum ne pregƒÉtim pentru o lume √Æn care AI-ul poate face mai mult dec√¢t noi?

üéØ MESAJUL PENTRU GENERA»öIA URMƒÇTOARE:
Nu trebuie sƒÉ √Æn»õelege»õi fiecare calcul al unei re»õele neurale.
Trebuie sƒÉ √Æn»õelege»õi puterea »ôi responsabilitatea care vine cu ea.

Fi»õi creativi. Fi»õi curio»ôi. Fi»õi √Æn»õelep»õi.
AI-ul este un instrument - folosi»õi-l pentru a face lumea mai bunƒÉ! üåü
        """)
        content.setStyleSheet("font-size: 14px; line-height: 1.5; color: #ecf0f1; font-weight: bold;")
        content.setWordWrap(True)
        section_layout.addWidget(content)

        section.setLayout(section_layout)
        layout.addWidget(section)

class TicTacToe(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('üéÆ X »ôi O - √énva»õƒÉ cum "g√¢nde»ôte" AI-ul!')
        self.setGeometry(100, 100, 700, 800)
        self.setMinimumSize(500, 600)  # Ensure minimum usable size
        self.setStyleSheet("""
            QWidget {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #2c3e50, stop: 1 #34495e);
                color: #ecf0f1;
                font-family: Arial;
            }
            QPushButton {
                background-color: #34495e;
                color: #ecf0f1;
                font-size: 28px;
                font-weight: bold;
                border: 3px solid #4a627a;
                border-radius: 12px;
                min-height: 80px;
            }
            QPushButton:hover {
                background-color: #4a627a;
                border-color: #5d7aa0;
            }
            QPushButton:pressed {
                background-color: #3d566e;
            }
            #statusLabel {
                font-size: 18px;
                font-weight: bold;
                background-color: #2c3e50;
                padding: 15px;
                border-radius: 8px;
                border: 2px solid #4a627a;
            }
            #newGameButton {
                background-color: #e74c3c;
                color: white;
                padding: 12px 20px;
                border: none;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
                min-height: 40px;
            }
            #newGameButton:hover {
                background-color: #c0392b;
            }
            #explainButton {
                background-color: #9b59b6;
                color: white;
                padding: 12px 20px;
                border: none;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
                min-height: 40px;
            }
            #explainButton:hover {
                background-color: #8e44ad;
            }
            #thinkingLabel {
                font-size: 16px;
                font-weight: bold;
                color: #ffffff;
                background-color: #e67e22;
                padding: 12px;
                border-radius: 8px;
                border: 2px solid #d35400;
                margin: 5px;
            }
        """)

        self.board = [''] * 9
        self.buttons = []
        self.player_turn = True
        self.last_move_type = None
        self.last_move_pos = None

        main_layout = QVBoxLayout()
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(20, 20, 20, 20)

        # Header with philosophy button
        header_layout = QHBoxLayout()

        # Left side - welcome text
        welcome_container = QVBoxLayout()
        welcome_label = QLabel("üéØ Bun venit la X »ôi O Educational!")
        welcome_label.setAlignment(Qt.AlignLeft)
        welcome_label.setStyleSheet("font-size: 20px; font-weight: bold; color: #3498db; margin-bottom: 5px;")
        welcome_container.addWidget(welcome_label)

        instruction_label = QLabel("ü§ñ JoacƒÉ √Æmpotriva AI-ului »ôi vezi cum 'g√¢nde»ôte'!")
        instruction_label.setAlignment(Qt.AlignLeft)
        instruction_label.setStyleSheet("font-size: 14px; color: #bdc3c7; margin-bottom: 10px;")
        welcome_container.addWidget(instruction_label)

        header_layout.addLayout(welcome_container)
        header_layout.addStretch()  # Push button to the right

        # Right side - philosophy button
        self.philosophy_button = QPushButton('üåå Viziunea\nErei AI')
        self.philosophy_button.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #5d6d7e, stop: 1 #717d8a);
                color: #ecf0f1;
                padding: 8px 12px;
                border: 1px solid #85929e;
                border-radius: 8px;
                font-size: 11px;
                font-weight: normal;
                min-width: 80px;
                max-width: 100px;
                max-height: 60px;
            }
            QPushButton:hover {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #6c7b7f, stop: 1 #7f8c8d);
                border-color: #a6acaf;
                color: white;
            }
        """)
        self.philosophy_button.clicked.connect(self.show_philosophy)
        header_layout.addWidget(self.philosophy_button)

        main_layout.addLayout(header_layout)

        # Status label
        self.status_label = QLabel("R√¢ndul tƒÉu (X) - Alege o pozi»õie!", self)
        self.status_label.setObjectName("statusLabel")
        self.status_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(self.status_label)

        # AI thinking indicator
        self.thinking_label = QLabel("")
        self.thinking_label.setObjectName("thinkingLabel")
        self.thinking_label.setAlignment(Qt.AlignCenter)
        self.thinking_label.setWordWrap(True)  # Allow text wrapping
        self.thinking_label.setMinimumHeight(50)  # Ensure minimum height

        # Set explicit font to ensure text renders properly
        font = QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        self.thinking_label.setFont(font)

        self.thinking_label.hide()
        main_layout.addWidget(self.thinking_label)

        grid_layout = QVBoxLayout()
        grid_layout.setSpacing(8)

        # Add position numbers for reference
        pos_info = QLabel("Pozi»õiile sunt numerotate 1-9 (st√¢nga-dreapta, sus-jos)")
        pos_info.setAlignment(Qt.AlignCenter)
        pos_info.setStyleSheet("font-size: 12px; color: #95a5a6; margin-bottom: 5px;")
        main_layout.addWidget(pos_info)

        for i in range(3):
            row_layout = QHBoxLayout()
            row_layout.setSpacing(8)
            for j in range(3):
                button = QPushButton('', self)
                # Remove fixed size to allow expansion
                button.setMinimumSize(80, 80)  # Minimum size to maintain usability
                button.setSizePolicy(button.sizePolicy().Expanding, button.sizePolicy().Expanding)
                position_num = i * 3 + j + 1
                button.setToolTip(f"Pozi»õia {position_num}")
                button.clicked.connect(lambda _, b=button, index=i*3+j: self.on_button_click(b, index))
                self.buttons.append(button)
                row_layout.addWidget(button)
            grid_layout.addLayout(row_layout)

        main_layout.addLayout(grid_layout)

        # Button section
        button_layout = QHBoxLayout()
        button_layout.setSpacing(10)

        self.new_game_button = QPushButton('üîÑ Joc Nou', self)
        self.new_game_button.setObjectName("newGameButton")
        self.new_game_button.clicked.connect(self.reset_game)

        self.explain_button = QPushButton('üß† ExplicƒÉ ultima mutare AI', self)
        self.explain_button.setObjectName("explainButton")
        self.explain_button.clicked.connect(self.explain_last_move)
        self.explain_button.setEnabled(False)

        button_layout.addWidget(self.new_game_button)
        button_layout.addWidget(self.explain_button)
        main_layout.addLayout(button_layout)

        # Educational footer
        footer_text = "üí° AI-ul urmeazƒÉ 3 reguli simple: C√¢»ôtigƒÉ ‚Üí BlocheazƒÉ ‚Üí Random"
        footer_label = QLabel(footer_text)
        footer_label.setAlignment(Qt.AlignCenter)
        footer_label.setStyleSheet("font-size: 12px; color: #7f8c8d; margin-top: 10px; font-style: italic;")
        main_layout.addWidget(footer_label)

        self.setLayout(main_layout)

    def on_button_click(self, button, index):
        if self.board[index] == '' and self.player_turn:
            self.board[index] = 'X'
            button.setText('X')
            button.setStyleSheet("color: #3498db; font-weight: bold;")
            self.player_turn = False
            self.status_label.setText("ü§ñ AI-ul se g√¢nde»ôte...")

            if not self.check_winner():
                # Show thinking animation
                self.thinking_label.setText("ü§î Analizez tabla de joc... (3 pa»ôi)")
                self.thinking_label.show()

                # Use QTimer to simulate thinking delay
                QTimer.singleShot(1500, self.computer_move)

    def computer_move(self):
        if '' not in self.board:
            self.thinking_label.hide()
            return

        move_type = None
        chosen_move = None

        # 1. Check if computer can win
        self.thinking_label.setText("PASUL 1: Verific daca pot castiga...")
        self.thinking_label.show()
        QTimer.singleShot(1000, lambda: self.execute_step_1())

    def execute_step_1(self):
        move_type = None
        chosen_move = None

        for i in range(9):
            if self.board[i] == '':
                self.board[i] = 'O'
                if self.check_winner(silent=True) == 'O':
                    chosen_move = i
                    move_type = 'win'
                    self.board[i] = 'O'
                    self.buttons[i].setText('O')
                    self.buttons[i].setStyleSheet("color: #e74c3c; font-weight: bold;")
                    self.thinking_label.setText("PERFECT! Pot castiga la pozitia " + str(i + 1) + "!")
                    self.thinking_label.show()
                    self.finalize_move(move_type, chosen_move)
                    return
                self.board[i] = ''

        # No winning move found, check for blocking
        self.thinking_label.setText("PASUL 2: Verific daca trebuie sa blochez...")
        self.thinking_label.show()
        QTimer.singleShot(1000, lambda: self.execute_step_2())

    def execute_step_2(self):
        move_type = None
        chosen_move = None

        for i in range(9):
            if self.board[i] == '':
                self.board[i] = 'X'
                if self.check_winner(silent=True) == 'X':
                    chosen_move = i
                    move_type = 'block'
                    self.board[i] = 'O'
                    self.buttons[i].setText('O')
                    self.buttons[i].setStyleSheet("color: #e74c3c; font-weight: bold;")
                    self.thinking_label.setText("BLOCHEZ! Te opresc la pozitia " + str(i + 1) + "!")
                    self.thinking_label.show()
                    self.finalize_move(move_type, chosen_move)
                    return
                self.board[i] = ''

        # No blocking needed, make random move
        self.thinking_label.setText("PASUL 3: Aleg o pozitie la intamplare...")
        self.thinking_label.show()
        QTimer.singleShot(1000, lambda: self.execute_step_3())

    def execute_step_3(self):
        empty_cells = [i for i, val in enumerate(self.board) if val == '']
        if empty_cells:
            chosen_move = random.choice(empty_cells)
            move_type = 'random'
            self.board[chosen_move] = 'O'
            self.buttons[chosen_move].setText('O')
            self.buttons[chosen_move].setStyleSheet("color: #e74c3c; font-weight: bold;")
            self.thinking_label.setText("ALEATOR! Aleg pozitia " + str(chosen_move + 1) + " la intamplare!")
            self.thinking_label.show()
            self.finalize_move(move_type, chosen_move)

    def finalize_move(self, move_type, chosen_move):
        # Store last move info for explanation
        self.last_move_type = move_type
        self.last_move_pos = chosen_move
        self.explain_button.setEnabled(True)

        # Finish move immediately - NO TIMER HERE, user can play right away
        self.finish_computer_move()

    def finish_computer_move(self):
        # DON'T hide the thinking label - let the final message stay visible
        self.player_turn = True
        game_result = self.check_winner()
        if not game_result:
            self.status_label.setText("R√¢ndul tƒÉu (X) - Alege o pozi»õie!")

    def explain_last_move(self):
        if self.last_move_type and self.last_move_pos is not None:
            dialog = AIExplanationDialog(self.last_move_type, self.board, self.last_move_pos, self)
            dialog.exec_()

    def check_winner(self, silent=False):
        win_conditions = [
            (0, 1, 2), (3, 4, 5), (6, 7, 8),  # rows
            (0, 3, 6), (1, 4, 7), (2, 5, 8),  # columns
            (0, 4, 8), (2, 4, 6)             # diagonals
        ]
        for a, b, c in win_conditions:
            if self.board[a] == self.board[b] == self.board[c] and self.board[a] != '':
                if not silent:
                    self.end_game(self.board[a])
                return self.board[a]

        if '' not in self.board:
            if not silent:
                self.end_game('Egalitate')
            return 'Egalitate'

        if not silent and self.player_turn:
            self.status_label.setText("R√¢ndul tƒÉu (X) - Alege o pozi»õie!")
        return None

    def end_game(self, winner):
        self.thinking_label.hide()
        if winner == 'Egalitate':
            self.status_label.setText("ü§ù Egalitate! BunƒÉ √Æncercare!")
        elif winner == 'X':
            self.status_label.setText("üéâ FelicitƒÉri! Ai c√¢»ôtigat!")
        else:  # winner == 'O'
            self.status_label.setText("ü§ñ AI-ul a c√¢»ôtigat! Mai √ÆncearcƒÉ!")

        for button in self.buttons:
            button.setEnabled(False)
        self.player_turn = False

        # Disable explanation button since game is over
        self.explain_button.setEnabled(False)

    def reset_game(self):
        self.board = [''] * 9
        self.player_turn = True
        self.last_move_type = None
        self.last_move_pos = None
        self.thinking_label.hide()
        self.status_label.setText("R√¢ndul tƒÉu (X) - Alege o pozi»õie!")
        self.explain_button.setEnabled(False)

        for button in self.buttons:
            button.setText('')
            button.setEnabled(True)
            button.setStyleSheet("")

    def show_philosophy(self):
        """
        üåå AratƒÉ dialogul cu filosofia AI
        """
        dialog = AIPhilosophyDialog(self)
        dialog.exec_()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    game = TicTacToe()
    game.show()
    sys.exit(app.exec_())